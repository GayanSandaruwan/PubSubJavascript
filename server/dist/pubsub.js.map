{"version":3,"sources":["../src/pubsub.js"],"names":["messageDict","PubSub","ctx","wss","clients","Map","subscription","Subscription","load","bind","handleReceivedClientMessage","handleAddSubscription","handleUnsubscribe","handlePublishMessage","removeClient","on","ws","id","autoId","client","userId","subscriptions","addClient","console","log","send","action","payload","message","messagej","JSON","parse","topic","body","userSubscriptions","getSubscriptions","sub","clientId","forEach","remove","getClient","subscriptionId","add","push","clientSubscriptions","_","get","s","type","filter","from","isBroadcast","subs","subscriptionType","stringToJson","unsubscribeTopic","publishTopic","publishMessage","broadcastTopicName","broadcastMessage","e","set","stringify","err"],"mappings":"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","file":"pubsub.js","sourcesContent":["import { Map } from 'immutable'\nimport _ from 'lodash'\nimport uuid from 'uuid/v1'\nimport Subscription from './subscription'\n\nlet messageDict = {};\n\nexport default class PubSub {\n\n  constructor (ctx) {\n\n    this.wss = ctx.wss\n\n    this.clients = new Map()\n    this.subscription = new Subscription()\n\n    this.load = this.load.bind(this)\n    this.handleReceivedClientMessage = this.handleReceivedClientMessage.bind(\n      this)\n    this.handleAddSubscription = this.handleAddSubscription.bind(this)\n    this.handleUnsubscribe = this.handleUnsubscribe.bind(this)\n    this.handlePublishMessage = this.handlePublishMessage.bind(this)\n    this.removeClient = this.removeClient.bind(this)\n\n    \n\n\n    this.load()\n  }\n\n  load () {\n\n    const wss = this.wss\n\n    wss.on('connection', (ws) => {\n\n      const id = this.autoId()\n\n      const client = {\n        id: id,\n        ws: ws,\n        userId: null,\n        subscriptions: [],\n      }\n\n      // add new client to the map\n      this.addClient(client)\n      console.log(\"Message Dict Send by server : \", messageDict);\n      this.send(client.id, {\n                action: 'history',\n                payload: {\n                  message: messageDict,\n                },\n              })\n      // listen when receive message from client\n      ws.on('message',\n        (message) => {\n          this.handleReceivedClientMessage(id, message)\n          // console.log(\"aaaaaaaaaaa\"+message);\n\n            let messagej = JSON.parse(message);\n            if (messagej.action == \"publish\" || messagej.action == \"broadcast\") {\n              messageDict[messagej.payload.topic] = messagej.payload.message.body;\n              console.log(\"Message Dictionary : \",messageDict);\n\n            }\n\n            \n          } \n        )\n\n      ws.on('close', () => {\n        console.log('Client is disconnected')\n        // Find user subscriptions and remove\n        const userSubscriptions = this.subscription.getSubscriptions(\n          (sub) => sub.clientId === id)\n        userSubscriptions.forEach((sub) => {\n          this.subscription.remove(sub.id)\n        })\n\n        // now let remove client\n\n        this.removeClient(id)\n\n      })\n\n    })\n\n  }\n\n  /**\n   * Handle add subscription\n   * @param topic\n   * @param clientId = subscriber\n   */\n  handleAddSubscription (topic, clientId) {\n\n    const client = this.getClient(clientId)\n    if (client) {\n      const subscriptionId = this.subscription.add(topic, clientId)\n      client.subscriptions.push(subscriptionId)\n      this.addClient(client)\n    }\n\n  }\n\n  /**\n   * Handle unsubscribe topic\n   * @param topic\n   * @param clientId\n   */\n  handleUnsubscribe (topic, clientId) {\n\n    const client = this.getClient(clientId)\n\n    let clientSubscriptions = _.get(client, 'subscriptions', [])\n\n    const userSubscriptions = this.subscription.getSubscriptions(\n      (s) => s.clientId === clientId && s.type === 'ws')\n\n    userSubscriptions.forEach((sub) => {\n\n      clientSubscriptions = clientSubscriptions.filter((id) => id !== sub.id)\n\n      // now let remove subscriptions\n      this.subscription.remove(sub.id)\n\n    })\n\n    // let update client subscriptions\n    if (client) {\n      client.subscriptions = clientSubscriptions\n      this.addClient(client)\n    }\n\n  }\n\n  /**\n   * Handle publish a message to a topic\n   * @param topic\n   * @param message\n   * @param from\n   * @isBroadcast = false that mean send all, if true, send all not me\n   */\n  handlePublishMessage (topic, message, from, isBroadcast = false) {\n\n    let subscriptions = isBroadcast\n      ? this.subscription.getSubscriptions(\n        (sub) => sub.topic === topic && sub.clientId !== from)\n      : this.subscription.getSubscriptions(\n        (subs) => subs.topic === topic)\n    // now let send to all subscribers in the topic with exactly message from publisher\n    subscriptions.forEach((subscription) => {\n\n      const clientId = subscription.clientId\n      const subscriptionType = subscription.type  // email, phone, ....\n      console.log('CLient id of subscription', clientId, subscription)\n      // we are only handle send via websocket\n      if (subscriptionType === 'ws') {\n        this.send(clientId, {\n          action: 'publish',\n          payload: {\n            topic: topic,\n            message: message,\n          },\n        })\n      }\n\n    })\n  }\n\n  /**\n   * Handle receive client message\n   * @param clientId\n   * @param message\n   */\n  handleReceivedClientMessage (clientId, message) {\n\n    const client = this.getClient(clientId)\n\n    if (typeof message === 'string') {\n\n      message = this.stringToJson(message)\n\n      const action = _.get(message, 'action', '')\n      switch (action) {\n\n        case 'me':\n\n          //Client is asking for his info\n\n          this.send(clientId,\n            {action: 'me', payload: {id: clientId, userId: client.userId}})\n\n          break\n\n        case 'subscribe':\n\n          //@todo handle add this subscriber\n          const topic = _.get(message, 'payload.topic', null)\n          if (topic) {\n            this.handleAddSubscription(topic, clientId)\n\n          }\n\n          break\n\n        case 'unsubscribe':\n\n          const unsubscribeTopic = _.get(message, 'payload.topic')\n          if (unsubscribeTopic) {\n\n            this.handleUnsubscribe(unsubscribeTopic, clientId)\n          }\n\n          break\n\n        case 'publish':\n\n          const publishTopic = _.get(message, 'payload.topic', null)\n          const publishMessage = _.get(message, 'payload.message')\n          if (publishTopic) {\n            const from = clientId\n            this.handlePublishMessage(publishTopic, publishMessage, from)\n          }\n\n          break\n\n        case 'broadcast':\n\n          const broadcastTopicName = _.get(message, 'payload.topic', null)\n          const broadcastMessage = _.get(message, 'payload.message')\n          if (broadcastTopicName) {\n            this.handlePublishMessage(broadcastTopicName, broadcastMessage,\n              clientId, true)\n          }\n\n          break\n\n        default:\n\n          break\n      }\n\n    } else {\n      // maybe data message we handle later.\n    }\n\n  }\n\n  /**\n   * Convert string of message to JSON\n   * @param message\n   * @returns {*}\n   */\n  stringToJson (message) {\n\n    try {\n      message = JSON.parse(message)\n    } catch (e) {\n      console.log(e)\n    }\n\n    return message\n  }\n\n  /**\n   * Add new client connection to the map\n   * @param client\n   */\n  addClient (client) {\n\n    if (!client.id) {\n      client.id = this.autoId()\n    }\n    this.clients = this.clients.set(client.id, client)\n  }\n\n  /**\n   * Remove a client after disconnecting\n   * @param id\n   */\n  removeClient (id) {\n    this.clients = this.clients.remove(id)\n  }\n\n  /**\n   * Get a client connection\n   * @param id\n   * @returns {V | undefined}\n   */\n  getClient (id) {\n\n    return this.clients.get(id)\n  }\n\n  /**\n   * Generate an ID\n   * @returns {*}\n   */\n  autoId () {\n    return uuid()\n  }\n\n  /**\n   * Send to client message\n   * @param message\n   */\n  send (clientId, message) {\n\n    const client = this.getClient(clientId)\n    if (!client) {\n      return\n    }\n    const ws = client.ws\n    try {\n      message = JSON.stringify(message)\n    }\n    catch (err) {\n      console.log('An error convert object message to string', err)\n    }\n\n    ws.send(message)\n  }\n\n}"]}