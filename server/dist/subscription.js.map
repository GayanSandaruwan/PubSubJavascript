{"version":3,"sources":["../src/subscription.js"],"names":["Subscription","subscriptions","Map","id","get","topic","clientId","type","findSubscriptionWithClientId","find","sub","autoId","subscription","console","log","set","remove","clear","predicate","filter"],"mappings":";;;;;;;;AAAA;;AACA;;;;;;;;IAEqBA,Y;AAEnB,0BAAe;AAAA;;AAEb,SAAKC,aAAL,GAAqB,IAAIC,cAAJ,EAArB;AACD;;AAED;;;;;;;;wBAIKC,E,EAAI;AACP,aAAO,KAAKF,aAAL,CAAmBG,GAAnB,CAAuBD,EAAvB,CAAP;AACD;;AAED;;;;;;;;;;wBAOKE,K,EAAOC,Q,EAAuB;AAAA,UAAbC,IAAa,uEAAN,IAAM;;;AAGjC;;AAEA,UAAMC,+BAA+B,KAAKP,aAAL,CAAmBQ,IAAnB,CACnC,UAACC,GAAD;AAAA,eAASA,IAAIJ,QAAJ,KAAiBA,QAAjB,IAA6BI,IAAIH,IAAJ,KAAaA,IAA1C,IAAkDG,IAAIL,KAAJ,KAAcA,KAAzE;AAAA,OADmC,CAArC;;AAGA,UAAIG,4BAAJ,EAAkC;AAChC;AACA,eAAOA,6BAA6BL,EAApC;AACD;AACD,UAAMA,KAAK,KAAKQ,MAAL,EAAX;AACA,UAAMC,eAAe;AACnBT,YAAIA,EADe;AAEnBE,eAAOA,KAFY;AAGnBC,kBAAUA,QAHS;AAInBC,cAAMA,IAJa,CAIP;AAJO,OAArB;;AAOAM,cAAQC,GAAR,CAAY,gCAAZ,EAA8CF,YAA9C;AACA,WAAKX,aAAL,GAAqB,KAAKA,aAAL,CAAmBc,GAAnB,CAAuBZ,EAAvB,EAA2BS,YAA3B,CAArB;AACA,aAAOT,EAAP;AACD;;AAED;;;;;;;2BAIQA,E,EAAI;;AAEV,WAAKF,aAAL,GAAqB,KAAKA,aAAL,CAAmBe,MAAnB,CAA0Bb,EAA1B,CAArB;AACD;;AAED;;;;;;4BAGS;;AAEP,WAAKF,aAAL,GAAqB,KAAKA,aAAL,CAAmBgB,KAAnB,EAArB;AACD;;AAED;;;;;;;;uCAKoC;AAAA,UAAlBC,SAAkB,uEAAN,IAAM;;AAClC,aAAOA,YACH,KAAKjB,aAAL,CAAmBkB,MAAnB,CAA0BD,SAA1B,CADG,GAEH,KAAKjB,aAFT;AAGD;;AAED;;;;;;;6BAIU;AACR,aAAO,kBAAP;AACD;;;;;;kBAjFkBD,Y","file":"subscription.js","sourcesContent":["import { Map } from 'immutable'\nimport uuid from 'uuid/v1'\n\nexport default class Subscription {\n\n  constructor () {\n\n    this.subscriptions = new Map()\n  }\n\n  /**\n   * Return subsciption\n   * @param id\n   */\n  get (id) {\n    return this.subscriptions.get(id)\n  }\n\n  /**\n   * Add new subscription\n   * @param topic\n   * @param clientId\n   * @param type\n   * @returns {*}\n   */\n  add (topic, clientId, type = 'ws') {\n\n\n    // need to find subscription with same type = 'ws'\n\n    const findSubscriptionWithClientId = this.subscriptions.find(\n      (sub) => sub.clientId === clientId && sub.type === type && sub.topic === topic)\n\n    if (findSubscriptionWithClientId) {\n      // exist and no need add more subscription\n      return findSubscriptionWithClientId.id\n    }\n    const id = this.autoId()\n    const subscription = {\n      id: id,\n      topic: topic,\n      clientId: clientId,\n      type: type, // email, phone\n    }\n\n    console.log('New subscriber via add method:', subscription)\n    this.subscriptions = this.subscriptions.set(id, subscription)\n    return id\n  }\n\n  /**\n   * Remove a subsciption\n   * @param id\n   */\n  remove (id) {\n\n    this.subscriptions = this.subscriptions.remove(id)\n  }\n\n  /**\n   * Clear all subscription\n   */\n  clear () {\n\n    this.subscriptions = this.subscriptions.clear()\n  }\n\n  /**\n   * Get Subscriptions\n   * @param predicate\n   * @returns {any}\n   */\n  getSubscriptions (predicate = null) {\n    return predicate\n      ? this.subscriptions.filter(predicate)\n      : this.subscriptions\n  }\n\n  /**\n   * Generate new ID\n   * @returns {*}\n   */\n  autoId () {\n    return uuid()\n  }\n}\n"]}